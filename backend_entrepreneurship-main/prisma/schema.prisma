generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// MODELOS PRINCIPALES
// ========================================

model Usuarios {
  usuario_id      Int        @id @default(autoincrement())
  nombre_completo String     @db.VarChar(150)
  email           String     @unique @db.VarChar(255)
  password_hash   String     @db.VarChar(255)
  fecha_nacimiento DateTime  @db.Timestamp(6)
  fecha_registro  DateTime?  @default(now()) @db.Timestamp(6)
  Negocios        Negocios[]
}

model Sectores {
  sector_id     Int        @id @default(autoincrement())
  nombre_sector String     @db.VarChar(100) @unique
  descripcion   String?
  Negocios      Negocios[]
  Resultados_Precio_Venta Resultados_Precio_Venta[]
  Resultados_Punto_Equilibrio Resultados_Punto_Equilibrio[]
}

model TamanosNegocio {
  id_tamano     Int        @id @default(autoincrement())
  tamano_nombre String     @db.VarChar(50)
  descripcion   String?
  Negocios      Negocios[]
}

model Negocios {
  negocio_id            Int                     @id @default(autoincrement())
  usuario_id            Int
  sector_id             Int
  nombre_negocio        String                  @db.VarChar(200)
  ubicacion_exacta      String?
  id_tamano             Int
  aforo_personas        Int
  fecha_creacion        DateTime?               @default(now()) @db.Timestamp(6)
  
  // Información financiera
  inversion_inicial     Decimal                 @db.Decimal(15, 2)
  capital_propio        Decimal?                @db.Decimal(15, 2)
  capital_prestamo      Decimal?                @db.Decimal(15, 2)
  tasa_interes          Decimal?                @db.Decimal(5, 2)
  
  // Relaciones
  Usuarios                       Usuarios                @relation(fields: [usuario_id], references: [usuario_id], onDelete: NoAction, onUpdate: NoAction)
  Sectores                      Sectores                 @relation(fields: [sector_id], references: [sector_id], onDelete: NoAction, onUpdate: NoAction)
  TamanosNegocio                TamanosNegocio           @relation(fields: [id_tamano], references: [id_tamano], onDelete: NoAction, onUpdate: NoAction)
  
  // Relaciones existentes
  Analisis_IA                    Analisis_IA[]
  NegocioProgresoPaso            NegocioProgresoPaso[]
  Registros_financieros          Registros_financieros[]
  Resultados_Validacion_Costos   Resultados_Validacion_Costos[]
  Resultados_Analisis_Completo   Resultados_Analisis_Completo[]
  Resultados_Precio_Venta        Resultados_Precio_Venta[]
  Resultados_Punto_Equilibrio    Resultados_Punto_Equilibrio[]
  
  // Nuevas relaciones
  Productos                      Productos[]
  CostosFijos                    CostosFijos[]
  CostosVariables                CostosVariables[]
  Personal                       Personal[]
  
  // 🆕 NUEVAS RELACIONES PARA PRECIOS DE VENTA
  AnalisisPreciosProducto        AnalisisPreciosProducto[]
  ResumenCostosGanancias         ResumenCostosGanancias[]
  
  @@map("Negocios")
}

// ========================================
// MODELOS DE PRODUCTOS Y RECETAS
// ========================================

model CategoriasProducto {
  categoria_id    Int        @id @default(autoincrement())
  nombre          String     @db.VarChar(100)
  descripcion     String?
  Productos       Productos[]
}

model UnidadMedida {
  unidad_id       Int        @id @default(autoincrement())
  nombre          String     @db.VarChar(50) @unique
  abreviatura     String     @db.VarChar(10)
  Productos       Productos[]
  CostosVariables CostosVariables[]
}

model Productos {
  producto_id           Int                @id @default(autoincrement())
  negocio_id            Int
  categoria_id          Int
  unidad_medida_id      Int
  nombre_producto       String             @db.VarChar(200)
  precio_por_unidad     Decimal            @db.Decimal(10, 2)
  porcion_requerida     Decimal            @db.Decimal(10, 2)
  porcion_unidad        Decimal?           @db.Decimal(10, 2)
  costo_por_unidad      Decimal            @db.Decimal(10, 2)
  
  // 🆕 NUEVOS CAMPOS PARA PRECIOS DE VENTA
  precio_venta_cliente      Decimal?           @db.Decimal(10, 2) // Precio que establece el cliente
  precio_venta_sugerido_ia  Decimal?           @db.Decimal(10, 2) // Precio sugerido por IA
  margen_ganancia_ia        Decimal?           @db.Decimal(5, 2)  // Margen sugerido por IA (%)
  margen_ganancia_real      Decimal?           @db.Decimal(5, 2)  // Margen real del cliente (%)
  ganancia_por_unidad       Decimal?           @db.Decimal(10, 2) // Ganancia calculada
  costo_total_producto      Decimal?           @db.Decimal(10, 2) // Costo total (variable + adicionales)
  
  // Relaciones
  Negocios              Negocios           @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  CategoriasProducto    CategoriasProducto @relation(fields: [categoria_id], references: [categoria_id], onDelete: NoAction, onUpdate: NoAction)
  UnidadMedida          UnidadMedida       @relation(fields: [unidad_medida_id], references: [unidad_id], onDelete: NoAction, onUpdate: NoAction)
  
  // Relaciones con recetas
  Recetas               Recetas[]
  CostosVariables       CostosVariables[]
  
  // 🆕 NUEVA RELACIÓN
  AnalisisPreciosProducto AnalisisPreciosProducto[]
  
  @@map("Productos")
}

// 🆕 NUEVO MODELO PARA ANÁLISIS DE PRECIOS POR PRODUCTO
model AnalisisPreciosProducto {
  analisis_id               Int         @id @default(autoincrement())
  producto_id               Int
  negocio_id                Int
  fecha_analisis            DateTime    @default(now()) @db.Timestamp(6)
  
  // Costos del producto
  costo_materia_prima       Decimal     @db.Decimal(10, 2)
  costo_mano_obra           Decimal     @db.Decimal(10, 2)
  costos_adicionales        Decimal     @db.Decimal(10, 2)
  costo_total_producto      Decimal     @db.Decimal(10, 2)
  
  // Precios y márgenes
  precio_venta_sugerido_ia  Decimal     @db.Decimal(10, 2)
  margen_ganancia_sugerido  Decimal     @db.Decimal(5, 2)  // Porcentaje
  precio_venta_cliente      Decimal     @db.Decimal(10, 2)
  margen_ganancia_real      Decimal     @db.Decimal(5, 2)  // Porcentaje
  
  // Cálculos de rentabilidad
  ganancia_por_unidad       Decimal     @db.Decimal(10, 2)
  rentabilidad_producto     Decimal     @db.Decimal(5, 2)  // Porcentaje
  
  // Análisis de mercado
  precio_promedio_mercado   Decimal?    @db.Decimal(10, 2)
  posicionamiento_precio    String?     @db.VarChar(50)    // alto, medio, bajo
  recomendaciones_precio    Json?       // Array de recomendaciones
  
  // Estado del análisis
  estado_analisis           String      @default("pendiente") @db.VarChar(50)
  fecha_actualizacion      DateTime    @updatedAt @db.Timestamp(6)
  
  // Relaciones
  Productos                 Productos   @relation(fields: [producto_id], references: [producto_id], onDelete: NoAction, onUpdate: NoAction)
  Negocios                  Negocios    @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  
  @@unique([producto_id, negocio_id], map: "unique_analisis_producto_negocio")
  @@map("AnalisisPreciosProducto")
}

// 🆕 MODELO PARA RESUMEN GENERAL DE COSTOS Y GANANCIAS
model ResumenCostosGanancias {
  resumen_id                Int         @id @default(autoincrement())
  negocio_id                Int
  fecha_analisis            DateTime    @default(now()) @db.Timestamp(6)
  
  // Resumen de costos totales
  costo_total_productos     Decimal     @db.Decimal(15, 2)
  costo_total_adicionales   Decimal     @db.Decimal(15, 2)
  costo_total_general       Decimal     @db.Decimal(15, 2)
  
  // Resumen de precios y ganancias
  precio_venta_total_sugerido Decimal   @db.Decimal(15, 2)
  precio_venta_total_cliente   Decimal  @db.Decimal(15, 2)
  ganancia_total_sugerida      Decimal  @db.Decimal(15, 2)
  ganancia_total_real           Decimal  @db.Decimal(15, 2)
  
  // Métricas de rentabilidad
  margen_ganancia_promedio     Decimal  @db.Decimal(5, 2)   // Porcentaje
  rentabilidad_total_negocio   Decimal  @db.Decimal(5, 2)   // Porcentaje
  roi_estimado                 Decimal  @db.Decimal(5, 2)   // Porcentaje
  
  // Análisis de productos
  producto_mas_rentable        String?   @db.VarChar(200)
  producto_menos_rentable      String?   @db.VarChar(200)
  productos_analizados         Int       @default(0)
  
  // Relaciones
  Negocios                     Negocios  @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  
  @@unique([negocio_id], map: "unique_resumen_negocio")
  @@map("ResumenCostosGanancias")
}

model Recetas {
  receta_id            Int                @id @default(autoincrement())
  producto_id          Int
  nombre_receta        String             @db.VarChar(200)
  tiempo_preparacion   Int?               // En minutos
  personal_requerido   Int?               // Cantidad de personas
  costos_adicionales   Decimal?           @db.Decimal(10, 2)
  precio_venta         Decimal            @db.Decimal(10, 2)
  
  // Relaciones
  Productos            Productos          @relation(fields: [producto_id], references: [producto_id], onDelete: NoAction, onUpdate: NoAction)
  CostosVariables      CostosVariables[]
  
  @@map("Recetas")
}

// ========================================
// MODELOS DE COSTOS
// ========================================

model TiposCosto {
  tipo_costo_id    Int        @id @default(autoincrement())
  nombre           String     @db.VarChar(100) @unique
  descripcion      String?
  es_fijo          Boolean    @default(true)
  CostosFijos      CostosFijos[]
  CostosVariables  CostosVariables[]
}

model CostosFijos {
  costo_fijo_id  Int                @id @default(autoincrement())
  negocio_id     Int
  tipo_costo_id  Int
  nombre         String             @db.VarChar(200)
  descripcion    String?
  monto          Decimal            @db.Decimal(12, 2)
  frecuencia     String             @db.VarChar(50)
  fecha_inicio   DateTime?          @default(now()) @db.Timestamp(6)
  fecha_fin      DateTime?
  activo         Boolean            @default(true)
  
  // Relaciones
  Negocios       Negocios           @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  TiposCosto     TiposCosto         @relation(fields: [tipo_costo_id], references: [tipo_costo_id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("CostosFijos")
}

model CostosVariables {
  costo_variable_id Int                @id @default(autoincrement())
  negocio_id        Int
  producto_id       Int?
  receta_id         Int?
  tipo_costo_id     Int
  nombre            String             @db.VarChar(200)
  descripcion       String?
  monto_por_unidad  Decimal           @db.Decimal(10, 2)
  unidad_medida_id  Int
  activo            Boolean           @default(true)
  
  // Relaciones
  Negocios          Negocios          @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  Productos         Productos?        @relation(fields: [producto_id], references: [producto_id], onDelete: NoAction, onUpdate: NoAction)
  Recetas           Recetas?          @relation(fields: [receta_id], references: [receta_id], onDelete: NoAction, onUpdate: NoAction)
  TiposCosto        TiposCosto        @relation(fields: [tipo_costo_id], references: [tipo_costo_id], onDelete: NoAction, onUpdate: NoAction)
  UnidadMedida      UnidadMedida      @relation(fields: [unidad_medida_id], references: [unidad_id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("CostosVariables")
}

// ========================================
// MODELOS DE PERSONAL
// ========================================

model CargosPersonal {
  cargo_id        Int        @id @default(autoincrement())
  nombre_cargo    String     @db.VarChar(100)
  descripcion     String?
  Personal        Personal[]
}

model Personal {
  personal_id       Int                @id @default(autoincrement())
  negocio_id        Int
  cargo_id          Int
  nombre            String             @db.VarChar(150)
  apellido          String             @db.VarChar(150)
  salario_base      Decimal            @db.Decimal(10, 2)
  horas_trabajo     Int?               // Horas por semana
  fecha_contratacion DateTime?         @default(now()) @db.Timestamp(6)
  activo            Boolean            @default(true)
  
  // Relaciones
  Negocios          Negocios           @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  CargosPersonal    CargosPersonal     @relation(fields: [cargo_id], references: [cargo_id], onDelete: NoAction, onUpdate: NoAction)
  
  @@map("Personal")
}

// ========================================
// MODELOS EXISTENTES (mantener compatibilidad)
// ========================================

model Analisis_IA {
  analisis_id                   Int                             @id @default(autoincrement())
  negocio_id                    Int
  fecha_analisis                DateTime?                       @default(now()) @db.Timestamp(6)
  Negocios                      Negocios                        @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  Resultados_Costos_Analizados  Resultados_Costos_Analizados[]
  Resultados_Costos_Omitidos    Resultados_Costos_Omitidos[]
  Resultados_Plan_Accion        Resultados_Plan_Accion[]
  Resultados_Riesgos_Detectados Resultados_Riesgos_Detectados[]
  Resultados_Analisis_Completo  Resultados_Analisis_Completo[]
  Resultados_Precio_Venta       Resultados_Precio_Venta[]
  Resultados_Punto_Equilibrio   Resultados_Punto_Equilibrio[]
}

model Aprendizaje {
  id_aprendizaje Int       @id @default(autoincrement())
  nombre         String    @db.VarChar(100)
  total_niveles  Int?
  Modulos        Modulos[]
}

model Estados {
  id_estado           Int                   @id @default(autoincrement())
  nombre_estado       String                @db.VarChar(50)
  NegocioProgresoPaso NegocioProgresoPaso[]
}

model Modulos {
  id_modulo             Int                     @id @default(autoincrement())
  id_aprendizaje        Int
  orden_modulo          Int?
  nombre_modulo         String                  @db.VarChar(150)
  titulo_conteido       String?                 @db.VarChar(255)
  concepto              String
  recurso_interactivo   String?                 @db.VarChar(255)
  Aprendizaje                    Aprendizaje             @relation(fields: [id_aprendizaje], references: [id_aprendizaje], onDelete: NoAction, onUpdate: NoAction)
  NegocioProgresoPaso            NegocioProgresoPaso[]
  Registros_financieros          Registros_financieros[]
  Resultados_Validacion_Costos   Resultados_Validacion_Costos[]
  Resultados_Analisis_Completo   Resultados_Analisis_Completo[]
  Resultados_Precio_Venta        Resultados_Precio_Venta[]
  Resultados_Punto_Equilibrio    Resultados_Punto_Equilibrio[]
}

model NegocioProgresoPaso {
  id               Int       @id @default(autoincrement())
  negocio_id       Int
  modulo_id        Int
  id_estado        Int
  fecha_inicio     DateTime? @db.Timestamp(6)
  fecha_completado DateTime? @db.Timestamp(6)
  Estados          Estados   @relation(fields: [id_estado], references: [id_estado], onDelete: NoAction, onUpdate: NoAction)
  Modulos          Modulos   @relation(fields: [modulo_id], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction)
  Negocios         Negocios  @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  @@unique([negocio_id, modulo_id], map: "unique_progreso_negocio_modulo")
  @@map("NegocioProgresoPaso")
}

model Registros_financieros {
  registro_id    Int       @id @default(autoincrement())
  negocio_id     Int
  modulo_id      Int
  nombre         String    @db.VarChar(150)
  monto          Decimal   @db.Decimal(12, 2)
  fecha_registro DateTime? @default(now()) @db.Timestamp(6)
  Modulos        Modulos   @relation(fields: [modulo_id], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction)
  Negocios       Negocios  @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
}

model Resultados_Costos_Analizados {
  resultado_costo_id Int         @id @default(autoincrement())
  analisis_id        Int
  nombre_costo       String?     @db.VarChar(150)
  valor_recibido     String?     @db.VarChar(50)
  rango_estimado     String?     @db.VarChar(100)
  evaluacion         String?     @db.VarChar(100)
  comentario         String?
  Analisis_IA        Analisis_IA @relation(fields: [analisis_id], references: [analisis_id], onDelete: NoAction, onUpdate: NoAction)
}

model Resultados_Costos_Omitidos {
  costo_omitido_id Int         @id @default(autoincrement())
  analisis_id      Int
  costo_omitido    String?     @db.VarChar(255)
  importancia      String?     @db.VarChar(100)
  Analisis_IA      Analisis_IA @relation(fields: [analisis_id], references: [analisis_id], onDelete: NoAction, onUpdate: NoAction)
}

model Resultados_Plan_Accion {
  plan_id     Int         @id @default(autoincrement())
  analisis_id Int
  titulo      String?     @db.VarChar(255)
  descripcion String?
  prioridad   String?     @db.VarChar(50)
  Analisis_IA Analisis_IA @relation(fields: [analisis_id], references: [analisis_id], onDelete: NoAction, onUpdate: NoAction)
}

model Resultados_Riesgos_Detectados {
  riesgo_id         Int         @id @default(autoincrement())
  analisis_id       Int
  riesgo            String?     @db.VarChar(255)
  causa_directa     String?
  impacto_potencial String?
  Analisis_IA       Analisis_IA @relation(fields: [analisis_id], references: [analisis_id], onDelete: NoAction, onUpdate: NoAction)
}

model Resultados_Validacion_Costos {
  validacion_id              Int         @id @default(autoincrement())
  negocio_id                 Int
  modulo_id                  Int
  fecha_validacion           DateTime?   @default(now()) @db.Timestamp(6)
  costos_validados           Json?       // Array de costos validados
  costos_faltantes           Json?       // Array de costos faltantes
  resumen_validacion         Json?       // Resumen completo de validación
  puntuacion_global          Int?        // Puntuación 1-10
  puede_proseguir_analisis   Boolean     @default(false)
  Negocios                   Negocios    @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  Modulos                    Modulos     @relation(fields: [modulo_id], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction)
}

model Resultados_Analisis_Completo {
  resultado_id               Int         @id @default(autoincrement())
  negocio_id                 Int
  modulo_id                  Int
  analisis_id                Int
  fecha_analisis             DateTime?   @default(now()) @db.Timestamp(6)
  costos_analizados          Json?       // Array completo de costos analizados
  riesgos_detectados         Json?       // Array completo de riesgos detectados
  plan_accion                Json?       // Array completo del plan de acción
  resumen_analisis           Json?       // Resumen general del análisis
  estado_guardado            String      @default("guardado") @db.VarChar(50)
  Negocios                   Negocios    @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  Modulos                    Modulos     @relation(fields: [modulo_id], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction)
  Analisis_IA                Analisis_IA @relation(fields: [analisis_id], references: [analisis_id], onDelete: NoAction, onUpdate: NoAction)
  @@unique([negocio_id, modulo_id, analisis_id], map: "unique_resultado_completo")
}

// ========================================
// NUEVOS MODELOS PARA ANÁLISIS DE IA
// ========================================

model Resultados_Precio_Venta {
  resultado_id               Int         @id @default(autoincrement())
  negocio_id                 Int
  modulo_id                  Int
  sector_id                  Int
  analisis_id                Int
  fecha_analisis             DateTime?   @default(now()) @db.Timestamp(6)
  
  // Campos para análisis de precio de venta
  costos_fijos_totales       Decimal     @db.Decimal(15, 2)
  costos_variables_totales   Decimal     @db.Decimal(15, 2)
  margen_contribucion        Decimal     @db.Decimal(5, 2) // Porcentaje
  precio_venta_sugerido      Decimal     @db.Decimal(10, 2)
  precio_venta_competitivo   Decimal     @db.Decimal(10, 2)
  rentabilidad_estimada      Decimal     @db.Decimal(5, 2) // Porcentaje
  
  // Análisis de mercado
  precio_promedio_mercado    Decimal?    @db.Decimal(10, 2)
  posicionamiento_precio     String?     @db.VarChar(100) // alto, medio, bajo
  recomendaciones_precio     Json?       // Array de recomendaciones
  
  // Relaciones
  Negocios                   Negocios    @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  Modulos                    Modulos     @relation(fields: [modulo_id], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction)
  Sectores                   Sectores    @relation(fields: [sector_id], references: [sector_id], onDelete: NoAction, onUpdate: NoAction)
  Analisis_IA                Analisis_IA @relation(fields: [analisis_id], references: [analisis_id], onDelete: NoAction, onUpdate: NoAction)
  
  @@unique([negocio_id, modulo_id, analisis_id], map: "unique_resultado_precio_venta")
  @@map("Resultados_Precio_Venta")
}

model Resultados_Punto_Equilibrio {
  resultado_id               Int         @id @default(autoincrement())
  negocio_id                 Int
  modulo_id                  Int
  sector_id                  Int
  analisis_id                Int
  fecha_analisis             DateTime?   @default(now()) @db.Timestamp(6)
  
  // Campos para análisis de punto de equilibrio
  costos_fijos_totales       Decimal     @db.Decimal(15, 2)
  costos_variables_totales   Decimal     @db.Decimal(15, 2)
  precio_venta_unitario      Decimal     @db.Decimal(10, 2)
  costo_variable_unitario    Decimal     @db.Decimal(10, 2)
  
  // Cálculos del punto de equilibrio
  punto_equilibrio_unidades  Decimal     @db.Decimal(10, 2)
  punto_equilibrio_ventas    Decimal     @db.Decimal(15, 2)
  margen_seguridad           Decimal     @db.Decimal(5, 2) // Porcentaje
  
  // Análisis de sensibilidad
  escenario_optimista        Json?       // Datos del escenario optimista
  escenario_pesimista        Json?       // Datos del escenario pesimista
  recomendaciones_equilibrio Json?       // Array de recomendaciones
  
  // Relaciones
  Negocios                   Negocios    @relation(fields: [negocio_id], references: [negocio_id], onDelete: NoAction, onUpdate: NoAction)
  Modulos                    Modulos     @relation(fields: [modulo_id], references: [id_modulo], onDelete: NoAction, onUpdate: NoAction)
  Sectores                   Sectores    @relation(fields: [sector_id], references: [sector_id], onDelete: NoAction, onUpdate: NoAction)
  Analisis_IA                Analisis_IA @relation(fields: [analisis_id], references: [analisis_id], onDelete: NoAction, onUpdate: NoAction)
  
  @@unique([negocio_id, modulo_id, analisis_id], map: "unique_resultado_punto_equilibrio")
  @@map("Resultados_Punto_Equilibrio")
}