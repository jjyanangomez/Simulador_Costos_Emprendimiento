import { CompleteAnalysisRepositoryApi, type CompleteAnalysisResult } from '../../infrastructure/adapters/CompleteAnalysisRepositoryApi';

export class GetCompleteAnalysisResults {
  private readonly repository: CompleteAnalysisRepositoryApi;

  constructor(repository: CompleteAnalysisRepositoryApi) {
    this.repository = repository;
  }

  async execute(negocioId: number, moduloId: number): Promise<CompleteAnalysisResult | null> {
    console.log(`üîç [FRONTEND-USE-CASE] Obteniendo an√°lisis completo para negocio ${negocioId} y m√≥dulo ${moduloId}`);
    
    try {
      // Intentar primero con el endpoint principal
      const result = await this.repository.getCompleteAnalysis(negocioId, moduloId);
      
      if (result) {
        console.log('‚úÖ [FRONTEND-USE-CASE] An√°lisis obtenido exitosamente');
        return result;
      }
      
      console.log('‚ö†Ô∏è [FRONTEND-USE-CASE] No se encontr√≥ resultado con endpoint principal, intentando alternativo');
      
      // Si no encuentra, intentar con el endpoint alternativo
      const alternativeResult = await this.repository.getCompleteAnalysisAlternative(negocioId, moduloId);
      
      if (alternativeResult) {
        console.log('‚úÖ [FRONTEND-USE-CASE] An√°lisis obtenido exitosamente (endpoint alternativo)');
        return alternativeResult;
      }
      
      console.log('‚ùå [FRONTEND-USE-CASE] No se encontraron resultados en ning√∫n endpoint');
      return null;
      
    } catch (error) {
      console.error('‚ùå [FRONTEND-USE-CASE] Error al obtener an√°lisis:', error);
      throw new Error('No se pudo obtener el an√°lisis completo. Por favor, intente nuevamente.');
    }
  }
}
