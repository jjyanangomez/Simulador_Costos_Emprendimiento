import { Controller, Post, Body, Get, Param, ParseIntPipe, HttpException, HttpStatus } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiParam } from '@nestjs/swagger';
import { IsArray, IsObject, IsString, ValidateNested, IsOptional } from 'class-validator';
import { Type } from 'class-transformer';
import { AiService } from './ai.service';
import { ValidationService } from './validation.service';
import { AnalysisService } from './analysis.service';

// DTOs para las peticiones
class CostDto {
  @IsString()
  name: string;

  @IsString()
  amount: string;
}

class BusinessInfoDto {
  @IsString()
  tipoNegocio: string;

  @IsString()
  tamano: string;

  @IsString()
  ubicacion: string;
}

export class ValidateCostsDto {
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => CostDto)
  costs: CostDto[];

  @IsObject()
  @ValidateNested()
  @Type(() => BusinessInfoDto)
  businessInfo: BusinessInfoDto;
}

export class AnalyzeCostsDto {
  @IsArray()
  @ValidateNested({ each: true })
  @Type(() => CostDto)
  costs: CostDto[];

  @IsObject()
  @ValidateNested()
  @Type(() => BusinessInfoDto)
  businessInfo: BusinessInfoDto;

  @IsOptional()
  validationResult: any; // Resultado de la validaci√≥n previa
}

@ApiTags('ai')
@Controller('ai')
export class AiController {
  constructor(
    private readonly aiService: AiService,
    private readonly validationService: ValidationService,
    private readonly analysisService: AnalysisService,
  ) {}

  @Post('validate-costs')
  @ApiOperation({ summary: 'Validar costos b√°sicos (r√°pido)' })
  @ApiBody({ type: ValidateCostsDto })
  @ApiResponse({ status: 200, description: 'Validaci√≥n completada.' })
  @ApiResponse({ status: 400, description: 'Datos inv√°lidos.' })
  @ApiResponse({ status: 500, description: 'Error interno del servidor.' })
  async validateCosts(@Body() validateCostsDto: ValidateCostsDto) {
    try {
      console.log('üîç [BACKEND-AI] Iniciando validaci√≥n r√°pida de costos...');
      console.log('üì• [BACKEND-AI] Datos recibidos:', JSON.stringify(validateCostsDto, null, 2));
      
      const result = await this.validationService.validateCosts(
        validateCostsDto.costs,
        validateCostsDto.businessInfo
      );
      
      console.log('‚úÖ [BACKEND-AI] Validaci√≥n completada:', result);
      return result;
    } catch (error) {
      console.error('üí• [BACKEND-AI] Error en validaci√≥n:', error);
      throw new HttpException(
        'Error al validar los costos',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  @Post('analyze-costs')
  @ApiOperation({ summary: 'An√°lisis detallado de costos (solo si pasa validaci√≥n)' })
  @ApiBody({ type: AnalyzeCostsDto })
  @ApiResponse({ status: 200, description: 'An√°lisis completado.' })
  @ApiResponse({ status: 400, description: 'Datos inv√°lidos.' })
  @ApiResponse({ status: 500, description: 'Error interno del servidor.' })
  async analyzeCosts(@Body() analyzeCostsDto: AnalyzeCostsDto) {
    try {
      console.log('üìä [BACKEND-AI] Iniciando an√°lisis detallado de costos...');
      
      const result = await this.analysisService.analyzeCosts(
        analyzeCostsDto.costs,
        analyzeCostsDto.businessInfo,
        analyzeCostsDto.validationResult
      );
      
      console.log('‚úÖ [BACKEND-AI] An√°lisis completado:', result);
      return result;
    } catch (error) {
      console.error('üí• [BACKEND-AI] Error en an√°lisis:', error);
      throw new HttpException(
        'Error al analizar los costos',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  @Post('final-analysis')
  @ApiOperation({ summary: 'An√°lisis final con recomendaciones' })
  @ApiBody({ type: AnalyzeCostsDto })
  @ApiResponse({ status: 200, description: 'An√°lisis final completado.' })
  @ApiResponse({ status: 400, description: 'Datos inv√°lidos.' })
  @ApiResponse({ status: 500, description: 'Error interno del servidor.' })
  async finalAnalysis(@Body() analyzeCostsDto: AnalyzeCostsDto) {
    try {
      console.log('üéØ [BACKEND-AI] Iniciando an√°lisis final...');
      
      const result = await this.analysisService.finalAnalysis(
        analyzeCostsDto.costs,
        analyzeCostsDto.businessInfo,
        analyzeCostsDto.validationResult
      );
      
      console.log('‚úÖ [BACKEND-AI] An√°lisis final completado:', result);
      return result;
    } catch (error) {
      console.error('üí• [BACKEND-AI] Error en an√°lisis final:', error);
      throw new HttpException(
        'Error al realizar el an√°lisis final',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  @Post('save-complete-results')
  @ApiOperation({ summary: 'Guardar todos los resultados de an√°lisis en la base de datos' })
  @ApiResponse({ status: 201, description: 'Resultados guardados exitosamente.' })
  @ApiResponse({ status: 400, description: 'Datos inv√°lidos.' })
  @ApiResponse({ status: 500, description: 'Error interno del servidor.' })
  async saveCompleteResults(@Body() saveDto: {
    negocioId: number;
    moduloId: number;
    analisisId: number;
    costosAnalizados: any[];
    riesgosDetectados: any[];
    planAccion: any[];
    resumenAnalisis?: any;
  }) {
    try {
      console.log('üíæ [BACKEND-AI] Guardando resultados completos...');
      
      const result = await this.analysisService.saveCompleteAnalysisResults(
        saveDto.negocioId,
        saveDto.moduloId,
        saveDto.analisisId,
        saveDto.costosAnalizados,
        saveDto.riesgosDetectados,
        saveDto.planAccion,
        saveDto.resumenAnalisis
      );
      
      console.log('‚úÖ [BACKEND-AI] Resultados guardados exitosamente');
      return result;
    } catch (error) {
      console.error('üí• [BACKEND-AI] Error al guardar resultados:', error);
      throw new HttpException(
        'Error al guardar los resultados',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  @Get('get-complete-results/:negocioId/:moduloId')
  @ApiOperation({ summary: 'Obtener resultados completos de an√°lisis guardados' })
  @ApiParam({ name: 'negocioId', description: 'ID del negocio' })
  @ApiParam({ name: 'moduloId', description: 'ID del m√≥dulo' })
  @ApiResponse({ status: 200, description: 'Resultados obtenidos exitosamente.' })
  @ApiResponse({ status: 404, description: 'Resultados no encontrados.' })
  @ApiResponse({ status: 500, description: 'Error interno del servidor.' })
  async getCompleteResults(
    @Param('negocioId', ParseIntPipe) negocioId: number,
    @Param('moduloId', ParseIntPipe) moduloId: number
  ) {
    try {
      console.log(`üîç [BACKEND-AI] Obteniendo resultados para negocio ${negocioId} y m√≥dulo ${moduloId}`);
      
      const result = await this.analysisService.getCompleteAnalysisResults(negocioId, moduloId);
      
      console.log('‚úÖ [BACKEND-AI] Resultados obtenidos exitosamente');
      return result;
    } catch (error) {
      console.error('üí• [BACKEND-AI] Error al obtener resultados:', error);
      throw new HttpException(
        'Error al obtener los resultados',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}